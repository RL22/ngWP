!function(){"use strict";angular.module("app",["ui.router","angular-loading-bar","ngSanitize","ui.bootstrap","ngAnimate","ui.router.title"])}(),function(){"use strict"}(),function(){"use strict";angular.module("app").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(t,e,r){t.html5Mode({enabled:!0,requireBase:!1}),r.otherwise("/home"),e.state("home",{url:"/",templateUrl:"partials/home.html"}).state("home.more",{templateUrl:"partials/home.more.html"}).state("home.features",{templateUrl:"partials/home.features.html"}).state("about",{url:"/about",views:{"":{templateUrl:"partials/about.html"},"columnOne@about":{template:"Look I am a column!"},"columnTwo@about":{template:"Look I am a column!"}},resolve:{$title:function(){return"About"}}}).state("posts",{url:"/posts",resolve:{posts:["PostsService",function(t){return t.getPosts()}],allposts:["PostsService",function(t){return t.getAllPosts()}],$title:function(){return"Posts"}},templateUrl:"partials/posts.html",controller:"PostsController",controllerAs:"posts"}).state("post",{url:"/post/:slug",resolve:{post:["$stateParams","PostsService",function(t,e){return e.getPost(t)}],$title:["post",function(t){return t.data[0].title.rendered}]},templateUrl:"partials/single.html",controller:"PostController",controllerAs:"posts"}).state("pages",{url:"/pages",resolve:{posts:["$stateParams","PostsService",function(t,e){return e.getPages()}],$title:function(){return"Pages"}},templateUrl:"partials/posts.html",controller:"PostsController",controllerAs:"posts"}).state("page",{url:"/page/:slug",resolve:{post:["$stateParams","PostsService",function(t,e){return e.getPage(t)}],$title:["post",function(t){return t.data[0].title.rendered}]},templateUrl:"partials/single.html",controller:"PostController",controllerAs:"posts"}).state("pagination",{url:"/posts/page/:number",resolve:{posts:["$stateParams","PostsService",function(t,e){return e.postsPagination(t)}],allposts:["PostsService",function(t){return t.getAllPosts()}],$title:["$stateParams",function(t){return"Posts ("+t.number+")"}]},templateUrl:"partials/posts.html",controller:"PostsController",controllerAs:"posts"}).state("search",{url:"/search/:query",resolve:{posts:["$stateParams","PostsService","$state",function(t,e,r){return e.getSearchResult(t)}],allposts:["PostsService",function(t){return t.getAllPosts()}],$title:["$stateParams",function(t){return t.query}]},templateUrl:"partials/search.html",controller:"PostsController",controllerAs:"posts"})}]),angular.module("app").run(["$rootScope","$anchorScroll",function(t,e){t.$on("$stateChangeStart",function(t,r,s,o,n){e()})}])}(),function(){"use strict";function t(t){this.post=t.data[0]}t.$inject=["post"],angular.module("app").controller("PostController",t)}(),function(){"use strict";function t(t,e,r){this.posts=e.data,this.allPosts=t.data.length}t.$inject=["allposts","posts","$stateParams"],angular.module("app").controller("PostsController",t)}(),function(){"use strict";function t(){return{restrict:"EA",templateUrl:"partials/pagination-directive.html",controller:["$scope","$stateParams",function(t,e){var r=void 0===e.number?1:e.number,s="/posts/page/",o=t.posts.allPosts;t.postsNavLink={prevLink:s+(parseInt(r)-1),nextLink:s+(parseInt(r)+1),currentPage:r,postsCount:o/10}}]}}angular.module("app").directive("postsNavLink",t)}(),function(){"use strict";function t(){function t(t,e,r){t.getQuery=function(t){return e.queryPosts(t).then(function(t){return t.data})},t.onSelect=function(e,s,o){t.$item=e,t.$model=s,t.$label=o,r.go("search",{query:t.$label})},t.onSubmit=function(){r.go("search",{query:t.searchQuery})}}return t.$inject=["$scope","PostsService","$state"],{restrict:"EA",templateUrl:"partials/search-form-directive.html",controller:t}}angular.module("app").directive("searchForm",t)}(),function(){"use strict";function t(t){var e=this,r="http://dev:8888/wp-json/wp/v2/";e.getPosts=function(){return t.get(r+"posts")},e.getAllPosts=function(){return t.get(r+"posts?filter[posts_per_page]=-1")},e.getPost=function(e){return t.get(r+"posts?filter[name]="+e.slug)},e.getPages=function(){return t.get(r+"pages?filter[posts_per_page]=-1")},e.getPage=function(e){return t.get(r+"pages?filter[name]="+e.slug)},e.getSearchResult=function(e){return t.get(r+"posts?filter[s]="+e.query+"&filter[posts_per_page]=-1")},e.queryPosts=function(e){return t.get(r+"posts?filter[s]="+e+"&filter[posts_per_page]=-1")},e.postsPagination=function(e){return t.get(r+"posts?page="+e.number)}}t.$inject=["$http"],angular.module("app").service("PostsService",t)}();
//# sourceMappingURL=data:application/json;base64,